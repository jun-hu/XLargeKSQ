```{r}
summary(train)
```
A glimpse into the training data:
```{r}
glimpse(train)
```
Now let's look into different types of source system tabs:
```{r}
unique(train$source_system_tab)
```
Now let's look into different types of source types:
```{r}
unique(train$source_type)
```
## Songs data
Summary of songs data:
```{r}
summary(songs)
```
A glimpse into the songs data:
```{r}
glimpse(songs)
```
## Members data
Summary of members data:
```{r}
summary(members)
```
A glimpse into the members data:
```{r}
glimpse(members)
```
## Test data
Summary of Test data:
```{r}
summary(test)
```
A glimpse into the test data:
```{r}
glimpse(test)
```
## Data preparation
Let's get the data all together for any exploration with respect to target variable. Let's look into different types of columns the generating dataset have:
```{r}
train$key<-paste(train$msno,train$song_id,sep="_")
test$key<-paste(test$msno,test$song_id,sep="_")
train$id<-row.names(train)
test$target<-''
train$type<-'train'
test$type<-'test'
train1<-train[,c('key','type','id','msno','song_id','source_system_tab','source_screen_name','source_type','target')]
test1<-test[,c('key','type','id','msno','song_id','source_system_tab','source_screen_name','source_type','target')]
rm(train)
rm(test)
master_df<-rbind(train1,test1)
rm(train1)
rm(test1)
colnames(master_df)
```
After adding further columns from songs and members dataset, we have the following columns:
```{r}
master_df_w_song_details<-merge.data.frame(x=master_df,
y=songs,
by=("song_id"),
all.x=TRUE)
master_df_w_song_member_details<-merge.data.frame(x=master_df_w_song_details,
y=members,
by=("msno"),
all.x=TRUE)
rm(master_df_w_song_details)
rm(songs)
rm(members)
master_df_w_song_member_details_train<-master_df_w_song_member_details[master_df_w_song_member_details$type=='train',]
rm(master_df_w_song_member_details)
colnames(master_df_w_song_member_details_train)
```
# Individual feature visualisations {.tabset .tabset-fade .tabset-pills}
Now let's look into the individual features and their relationship with target variables. We will go through each variable type and see their distributions.
## Features from original data
Note the logarithmic y-axes:
```{r  split=FALSE, fig.align = 'default', warning = FALSE, fig.cap ="Fig. 1", out.width="100%"}
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(legend.position = "none")
p2 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_screen_name, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(axis.text = element_text(size = 5, colour="black"),legend.position = "none")+coord_flip()
p3 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_type, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
ggarrange(p1,                                                 # First row with scatter plot
ggarrange(p2, p3, ncol = 2), # Second row with box and dot plots
nrow = 2
)
```
So as we can see from the training data, people seem to listen more songs through *my library* or through *discover*. Also, they seem to listen to songs from *online playlist*,
*local playlist* or *local library*
## Categorical Features from songs and members data - 1
Now, let's look into frequencies of top 15 genres, artists, composers and songs from the training data. Note the logarithmic y-axes:
```{r  split=FALSE, fig.align = 'default', warning = FALSE, fig.cap ="Fig. 2", out.width="100%"}
d2 <- aggregate(key~genre_ids,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
remove(d2)
p1 <-
ggplot(d3,aes(genre_ids,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
d2 <- aggregate(key~artist_name,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$artist_id<-row.names(d3)
remove(d2)
p2 <-
ggplot(d3,aes(artist_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
d2 <- aggregate(key~composer,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$composer_id<-row.names(d3)
remove(d2)
p3 <-
ggplot(d3,aes(composer_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
d2 <- aggregate(key~song_id,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$songs_id<-row.names(d3)
remove(d2)
p4 <-
ggplot(d3,aes(songs_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
layout <- matrix(c(1,2,3,4),2,2,byrow=TRUE)
multiplot(p1, p2, p3, p4, layout=layout)
```
We have replaced the actual artist names, composer names and song ids with dummy ids. We will use these shortened ids for feature generation at a later stage
## Categorical Features from songs and members data - 2
Now, let's look into frequencies of top 15 lyricists, cities, languages and *registered_via* from the training data. Note the logarithmic y-axes:
```{r  split=FALSE, fig.align = 'default', warning = FALSE, fig.cap ="Fig. 3", out.width="100%"}
d2 <- aggregate(key~lyricist,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$lyricist_id<-row.names(d3)
remove(d2)
p1 <-
ggplot(d3,aes(lyricist_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
d2 <- aggregate(key~city,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$city_id<-row.names(d3)
remove(d2)
p2 <-
ggplot(d3,aes(city_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
d2 <- aggregate(key~language,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$language_id<-row.names(d3)
remove(d2)
p3 <-
ggplot(d3,aes(language_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
d2 <- aggregate(key~registered_via,data=master_df_w_song_member_details_train,FUN=length)
d2<- d2[order(-d2$key),]
d3<- head(d2,15)
d3$registered_approach_id<-row.names(d3)
remove(d2)
p4 <-
ggplot(d3,aes(registered_approach_id,key)) +
geom_bar(stat='identity',fill="#00394C") +
scale_y_log10() +
theme(legend.position = "none")+coord_flip()
layout <- matrix(c(1,2,3,4),2,2,byrow=TRUE)
multiplot(p1, p2, p3, p4, layout=layout)
```
We have replaced the actual city, lyricist names, languages and registered_approaches with dummy ids. We will use these shortened ids for feature generation at a later stage.
# Combines feature visualizations {.tabset .tabset-fade .tabset-pills}
title:
---
title: 'Pallab Sarkar - KKBox Music Recommendation EDA'
date: '`r Sys.Date()`'
output:
html_document:
number_sections: true
fig_caption: true
toc: true
fig_width: 7
fig_height: 4.5
theme: cosmo
highlight: tango
code_folding: hide
---
---
title: 'Pallab Sarkar - KKBox Music Recommendation EDA'
date: '`r Sys.Date()`'
output:
html_document:
number_sections: true
fig_caption: true
toc: true
fig_width: 7
fig_height: 4.5
theme: cosmo
highlight: tango
code_folding: hide
------
title: 'Pallab Sarkar - KKBox Music Recommendation EDA'
date: '`r Sys.Date()`'
output:
html_document:
number_sections: true
fig_caption: true
toc: true
fig_width: 7
fig_height: 4.5
theme: cosmo
highlight: tango
code_folding: hide
---
---
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library('ggpubr') # visualisation
install.packages("package name")
출처: http://rfriend.tistory.com/7 [R, Python 분석과 프로그래밍 (by R Friend)]
install.packages("package name")
출처: http://rfriend.tistory.com/7 [R, Python 분석과 프로그래밍 (by R Friend)]
install.packages("ggplot2")
install.packages("scales")
install.packages("grid")
install.packages("ggthemes")
install.packages("gridExtra")
install.packages("RColorBrewer")
install.packages("corrplot")
install.packages("ggpubr")
install.packages("dplyr")
install.packages("readr")
install.packages("data.table")
install.packages("tibble")
install.packages("tidyr")
install.packages("stringr")
install.packages("forcats")
install.packages("forcats")
install.packages("alluvial")
install.packages("ggfortify")
install.packages("ggrepel")
install.packages("ggridges")
install.packages("VIM")
install.packages("plotly")
install.packages("ggforce")
train <- as.tibble(fread('../input/train.csv'))
test <- as.tibble(fread('../input/test.csv'))
songs<-as.tibble(fread('../input/songs.csv'))
members<-as.tibble(fread('../input/members.csv'))
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
library('ggpubr') # visualisation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
save.image("C:\\Users\\KANG JUN HU\\Documents\\Google Drive\\3.Purdue_Capstone_Design_Project\\XLargeKSQ\\소스코드\\.RData")
q()
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
load("C:\\Users\\KANG JUN HU\\Documents\\Google Drive\\3.Purdue_Capstone_Design_Project\\XLargeKSQ\\소스코드\\.RData")
library('ggpubr') # visualisation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
library('plotly') # interactive
library('ggforce') # visualisation
train <- as.tibble(fread('../input/train.csv'))
test <- as.tibble(fread('../input/test.csv'))
songs<-as.tibble(fread('../input/songs.csv'))
members<-as.tibble(fread('../input/members.csv'))
ls
members<-as.tibble(fread('C:\Users\KANG JUN HU\Documents\Google Drive\3.Purdue_Capstone_Design_Project\XLargeKSQ\input\train.csv'))
members<-as.tibble(fread('C//Users//KANG JUN HU//Documents//Google Drive//3.Purdue_Capstone_Design_Project//XLargeKSQ//input//train.csv'))
save.image("C:\\Users\\KANG JUN HU\\Documents\\Google Drive\\3.Purdue_Capstone_Design_Project\\XLargeKSQ\\소스코드\\Sourcecode")
q()
train <- as.tibble(fread('../input/train.csv'))
test <- as.tibble(fread('../input/test.csv'))
songs<-as.tibble(fread('../input/songs.csv'))
members<-as.tibble(fread('../input/members.csv'))
install.package("tibble")
install.packages("tibble")
members<-as.tibble(fread('../input/members.csv'))
library('tibble')
install.packages("tibble")
library('tibble')
members<-as.tibble(fread('../input/members.csv'))
install.packages("data.table")
members<-as.tibble(fread('../input/members.csv'))
install.packages("data.table")
library('data.table')
members<-as.tibble(fread('../input/members.csv'))
getwd()
setwd("C:\Users\KANG JUN HU\Documents\Google Drive\3.Purdue_Capstone_Design_Project\XLargeKSQ")
setwd("C\\Users\\KANG JUN HU\\Documents\\Google Drive\\3.Purdue_Capstone_Design_Project\\XLargeKSQ")
q()
setwd("C:\\Users\\KANG JUN HU\\Documents\\Google Drive\\3.Purdue_Capstone_Design_Project\\XLargeKSQ\\sourcecode")
install.packages("ggplot2")
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
library('ggpubr') # visualisation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
library('plotly') # interactive
library('ggforce') # visualisation
train <- as.tibble(fread('../input/train.csv'),10^5)
train
rm(train)
train <- as.tibble(fread('../input/train.csv',norws=5),10^5)
train <- as.tibble(fread('../input/train.csv',norws=5))
train <- as.tibble(fread('../input/train.csv',norws='5'))
train <- as.tibble(fread('../input/train.csv',nrows='5'))
train
rm(train)
train <- as.tibble(fread('../input/train.csv',nrows='10^5'))
train <- as.tibble(fread('../input/train.csv',nrows='100000'))
train
train <- as.tibble(fread('../input/test.csv',nrows='100000'))
train <- as.tibble(fread('../input/train.csv',nrows='100000'))
test <- as.tibble(fread('../input/test.csv',nrows='100000'))
songs <- as.tibble(fread('../input/songs.csv',nrows='100000'))
members <- as.tibble(fread('../input/members.csv',nrows='100000'))
train$key<-paste(train$msno,train$song_id,sep="_")
test$key<-paste(test$msno,test$song_id,sep="_")
train$id<-row.names(train)
test$target<-''
train$type<-'train'
test$type<-'test'
train1<-train[,c('key','type','id','msno','song_id','source_system_tab','source_screen_name','source_type','target')]
test1<-test[,c('key','type','id','msno','song_id','source_system_tab','source_screen_name','source_type','target')]
rm(train)
rm(test)
master_df<-rbind(train1,test1)
rm(train1)
rm(test1)
colnames(master_df)
master_df_w_song_details<-merge.data.frame(x=master_df,
y=songs,
by=("song_id"),
all.x=TRUE)
master_df_w_song_member_details<-merge.data.frame(x=master_df_w_song_details,
y=members,
by=("msno"),
all.x=TRUE)
rm(master_df_w_song_details)
rm(songs)
rm(members)
master_df_w_song_member_details_train<-master_df_w_song_member_details[master_df_w_song_member_details$type=='train',]
rm(master_df_w_song_member_details)
colnames(master_df_w_song_member_details_train)
master_df_w_song_details<-merge.data.frame(x=master_df,
y=songs,
by=("song_id"),
all.x=TRUE)
master_df_w_song_member_details<-merge.data.frame(x=master_df_w_song_details,
y=members,
by=("msno"),
all.x=TRUE)
rm(master_df_w_song_details)
rm(songs)
rm(members)
master_df_w_song_member_details_train<-master_df_w_song_member_details[master_df_w_song_member_details$type=='train',]
rm(master_df_w_song_member_details)
colnames(master_df_w_song_member_details_train)
train <- as.tibble(fread('../input/train.csv',nrows=10000))
test <- as.tibble(fread('../input/test.csv',nrows=10000))
songs<-as.tibble(fread('../input/songs.csv',nrows=10000))
members<-as.tibble(fread('../input/members.csv',nrows=10000))
train$key<-paste(train$msno,train$song_id,sep="_")
test$key<-paste(test$msno,test$song_id,sep="_")
train$id<-row.names(train)
test$target<-''
train$type<-'train'
test$type<-'test'
train1<-train[,c('key','type','id','msno','song_id','source_system_tab','source_screen_name','source_type','target')]
test1<-test[,c('key','type','id','msno','song_id','source_system_tab','source_screen_name','source_type','target')]
rm(train)
rm(test)
master_df<-rbind(train1,test1)
rm(train1)
rm(test1)
colnames(master_df)
master_df_w_song_details<-merge.data.frame(x=master_df,
y=songs,
by=("song_id"),
all.x=TRUE)
master_df_w_song_member_details<-merge.data.frame(x=master_df_w_song_details,
y=members,
by=("msno"),
all.x=TRUE)
rm(master_df_w_song_details)
rm(songs)
rm(members)
master_df_w_song_member_details_train<-master_df_w_song_member_details[master_df_w_song_member_details$type=='train',]
rm(master_df_w_song_member_details)
colnames(master_df_w_song_member_details_train)
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(legend.position = "none")
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(legend.position = "none")
ggplot(aes(source_system_tab, fill = "#00394C"))
p1 <- master_df_w_song_member_details_train %>%
+     ggplot(aes(source_system_tab, fill = "#00394C")) +
+     geom_bar() +
+     scale_y_log10() +
+     theme(legend.position = "none")
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab, fill = "#00394C"))
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(legend.position = "none")
ggarrange(p1)
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab,source_screen_name, fill = "#00394C")) +
geom_bar() +
scale_y_log10() +
theme(legend.position = "none")
ggarrange(p1)
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab,source_screen_name, fill = "#00394C")) +
geom_bar() +
theme(legend.position = "none")
ggarrange(p1)
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(source_system_tab,source_screen_name, fill = "#00394C")) +
theme(legend.position = "none")
ggarrange(p1)
p1 <- master_df_w_song_member_details_train %>%
ggplot(data=train ,aes(source_system_tab,source_screen_name, fill = "#00394C")) +
theme(legend.position = "none")
train
p1 <- master_df_w_song_member_details_train %>%
ggplot(aes(x=source_system_tab,y=source_screen_name)) +
geom_bar() +
theme(legend.position = "none")
